// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ethereum.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthereumClient is the client API for Ethereum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumClient interface {
	// returns wei balance of the provided account
	BalanceGet(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balance, error)
	TransactionSend(ctx context.Context, in *TransactionSendReq, opts ...grpc.CallOption) (*TransactionSendResp, error)
}

type ethereumClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumClient(cc grpc.ClientConnInterface) EthereumClient {
	return &ethereumClient{cc}
}

func (c *ethereumClient) BalanceGet(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/Ethereum/BalanceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumClient) TransactionSend(ctx context.Context, in *TransactionSendReq, opts ...grpc.CallOption) (*TransactionSendResp, error) {
	out := new(TransactionSendResp)
	err := c.cc.Invoke(ctx, "/Ethereum/TransactionSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthereumServer is the server API for Ethereum service.
// All implementations must embed UnimplementedEthereumServer
// for forward compatibility
type EthereumServer interface {
	// returns wei balance of the provided account
	BalanceGet(context.Context, *BalanceReq) (*Balance, error)
	TransactionSend(context.Context, *TransactionSendReq) (*TransactionSendResp, error)
	mustEmbedUnimplementedEthereumServer()
}

// UnimplementedEthereumServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumServer struct {
}

func (UnimplementedEthereumServer) BalanceGet(context.Context, *BalanceReq) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceGet not implemented")
}
func (UnimplementedEthereumServer) TransactionSend(context.Context, *TransactionSendReq) (*TransactionSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionSend not implemented")
}
func (UnimplementedEthereumServer) mustEmbedUnimplementedEthereumServer() {}

// UnsafeEthereumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumServer will
// result in compilation errors.
type UnsafeEthereumServer interface {
	mustEmbedUnimplementedEthereumServer()
}

func RegisterEthereumServer(s grpc.ServiceRegistrar, srv EthereumServer) {
	s.RegisterService(&Ethereum_ServiceDesc, srv)
}

func _Ethereum_BalanceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServer).BalanceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ethereum/BalanceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServer).BalanceGet(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ethereum_TransactionSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumServer).TransactionSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ethereum/TransactionSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumServer).TransactionSend(ctx, req.(*TransactionSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ethereum_ServiceDesc is the grpc.ServiceDesc for Ethereum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ethereum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ethereum",
	HandlerType: (*EthereumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BalanceGet",
			Handler:    _Ethereum_BalanceGet_Handler,
		},
		{
			MethodName: "TransactionSend",
			Handler:    _Ethereum_TransactionSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethereum.proto",
}
